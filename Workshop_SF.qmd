---
title: "Spatial Analysis with R"
format: html
editor: visual
---

# Exploring British Columbia's Educational Landscape

Welcome to our workshop on spatial analysis using R and the SF package!
Today, we'll embark on a journey through British Columbia's educational
landscape. As urban planners and education policy researchers, we've
been tasked with analyzing the distribution and accessibility of schools
across the province. This analysis will help inform decisions about
resource allocation, new school placements, and educational equity.

Let's begin by loading our essential tools:

```{r}
#| message: false

library(sf)         # For handling spatial data
library(dplyr)      # For data manipulation
library(ggplot2)    # For creating beautiful visualizations
# library(units)      # For handling measurement units
library(lwgeom)     # For sf calculations, such as area
library(units)      # For handling measurement units
```

```{r}
# don't use spherical geometries
# See issue https://github.com/r-spatial/sf/issues/1762
sf_use_s2(FALSE)
theme_set(theme_minimal()) # ggplot theme
```

## Setting the Stage: Loading Our Data

Our first step is to load the necessary datasets. In a real-world
scenario, you might receive these files from various government
departments or open data portals.

```{r}
# Load world map for context
world_map <- read_sf("data/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp")

# Load Canadian provinces
can_provinces <- read_sf("data/lpr_000a21a_e/lpr_000a21a_e.shp")

# Load Canadian districts
can_districts <- read_sf("data/lfed000a21a_e/lfed000a21a_e.shp")

# Load Greater Vancouver schools
greatervan_schools <- read_sf(file.path("data", "k-12", "GSR_SCHOOLS_K_TO_12_SVW", "SCHOOL_K12_point.shp"))
```

Here, we're using `read_sf()` to load our spatial data. This function is
part of the sf package and reads various spatial file formats,
converting them into sf objects that we can easily manipulate in R.

## Understanding and Working with Projections

Before we dive deep into our analysis of British Columbia's educational
landscape, let's take a moment to explore the concept of map
projections. Projections are methods of representing the Earth's
three-dimensional surface on a two-dimensional plane. Different
projections have different properties and are suitable for different
purposes.

The sf package makes it easy to work with and switch between different
projections. Let's demonstrate this using our world map data:

```{r}
# Check the current projection of our world map
st_crs(world_map)

# Plot the world map in its original projection
ggplot(world_map) + 
  geom_sf() +
  ggtitle("World Map in Original Projection")
```

This is how our world map looks in its original projection. Now, let's
experiment with some different projections:

```{r}
# Removing Antarctica
world_no_antarctica <- world_map %>% 
  filter(ISO_A3 != "ATA")


# Robinson projection
ggplot(world_no_antarctica) + 
  geom_sf() +
  coord_sf(crs = "+proj=robin") +
  ggtitle("World Map in Robinson Projection")

# Mercator projection
ggplot(world_no_antarctica) + 
  geom_sf() +
  coord_sf(crs = "+proj=merc") +
  ggtitle("World Map in Mercator Projection")

# Mollweide projection
ggplot(world_no_antarctica) + 
  geom_sf() +
  coord_sf(crs = "+proj=moll") +
  ggtitle("World Map in Mollweide Projection")
```

As you can see, each projection represents the world differently:

1.  The Robinson projection is a compromise projection that reduces
    distortion of all map properties.
2.  The Mercator projection preserves angles but significantly distorts
    area, especially near the poles.
3.  The Mollweide projection preserves area but distorts shape,
    especially near the edges.

Now, let's focus on Canada and demonstrate how to transform our data to
a projection that's more suitable for our area of interest:

```{r}
# Filter for Canada
canada <- world_map %>% 
  filter(ADMIN == "Canada")

# Plot Canada in the original projection
ggplot(canada) + 
  geom_sf() +
  ggtitle("Canada in Original Projection")

# Transform to Lambert Conformal Conic projection (commonly used for Canada)
canada_lambert <- canada %>% 
  st_transform(crs = "+proj=lcc +lat_1=49 +lat_2=77 +lat_0=49 +lon_0=-95 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs")

# Plot Canada in Lambert Conformal Conic projection
ggplot(canada_lambert) + 
  geom_sf() +
  ggtitle("Canada in Lambert Conformal Conic Projection")
```

The Lambert Conformal Conic projection is often used for Canada because
it provides a good balance of area and shape accuracy for this region.

When working with spatial data, it's crucial to ensure that all your
datasets are in the same projection. Let's demonstrate how to check and
align projections:

```{r}
# Check CRS of our datasets
st_crs(can_provinces)$proj4string
st_crs(greatervan_schools)$proj4string
st_crs(can_provinces)$units
st_crs(greatervan_schools)$units

crs_selection <- 3005 # Albers

# Transform datasets' projections to match
can_provinces <- st_transform(can_provinces, crs_selection)
greatervan_schools <- st_transform(greatervan_schools, crs_selection)
can_districts <- st_transform(can_districts, crs_selection)

ggplot(can_provinces) +
  geom_sf(fill = NA) +
  ggtitle("Canada with EPSG:3005 projection")

# Verify that they now have the same CRS
st_crs(can_provinces) == st_crs(greatervan_schools)
```

In this example, we checked the Coordinate Reference System (CRS) of our
datasets, transformed one to match the other, and then verified that
they now have the same CRS. This step is crucial before performing any
spatial operations or analyses involving multiple datasets.

Understanding and correctly handling projections is fundamental in
spatial analysis. It affects everything from how your maps look to the
accuracy of distance and area calculations. As we proceed with our
analysis of the Greater Vancouver Area's schools, we'll ensure our data
is consistently projected for accurate results.

## British Columbia

Let's extract the BC data and ensure all our datasets are using the same
coordinate reference system (CRS).

```{r}
# Extract British Columbia from Canadian provinces
bc <- can_provinces %>% 
  filter(PRENAME == "British Columbia")

ggplot(bc) +
  geom_sf(fill = NA, color = "darkgrey") +
  ggtitle("British Columbia")

ggplot(can_districts) +
  geom_sf(fill = NA, color = "darkgrey") +
  ggtitle("Canadian Districts")

# Extract BC districts
bc_districts <- st_intersection(can_districts, bc)

ggplot(bc_districts) +
  geom_sf(fill = NA, color = "darkgrey") +
  ggtitle("British Columbia Districts")
```

In this step, we're using `filter()` to select British Columbia from our
provinces dataset. Then, we use `st_transform()` to ensure all our data
is in the same CRS. This is crucial for accurate spatial analysis.
Finally, we use `st_intersection()` to extract only the districts within
BC.

Let's visualize our data to get a sense of what we're working with:

```{r}
ggplot() +
  geom_sf(data = bc_districts, fill = NA, color = "darkgrey") +
  geom_sf(data = greatervan_schools, color = "red", size = 1) +
  ggtitle("Schools in Greater Vancouver Area")
```

This map gives us an overview of BC's geography, its districts, and the
distribution of schools in the Greater Vancouver area.

Let's zoom in a little using the `st_bbox()` function.

```{r}
# Create a boundary around the locations of schools with a 5km buffer
(bbox_schools <- st_bbox(greatervan_schools))
(bbox_schools <- st_as_sfc(bbox_schools))

```


```{r}
ggplot() +
  geom_sf(data = bbox_schools, fill = NA, color = "darkgrey") +
  geom_sf(data = greatervan_schools, color = "red", size = 1) +
  ggtitle("Schools of Greater Vancouver")

bbox_schools <- st_buffer(bbox_schools, dist = 5e3) # 5km

ggplot() +
  geom_sf(data = bbox_schools, fill = NA, color = "darkgrey") +
  geom_sf(data = greatervan_schools, color = "red", size = 0.5) +
  ggtitle("Schools of Greater Vancouver")
```


```{r}
bbox_schools <- greatervan_schools %>% 
    st_union() %>% 
    st_convex_hull()
  
ggplot() +
  geom_sf(data = bbox_schools, fill = NA, color = "darkgray") +
  geom_sf(data = greatervan_schools, color = "red", size = 1) +
  ggtitle("Schools of Greater Vancouver")
```


```{r}
bbox_schools <- bbox_schools %>% 
  st_buffer(dist = 5e3) %>% 
  st_bbox() %>% 
  st_as_sfc()

ggplot() +
  geom_sf(data = bbox_schools, fill = NA, color = "darkgray") +
  geom_sf(data = greatervan_schools, color = "red", size = 1) +
  ggtitle("Schools of Greater Vancouver")
```


```{r}
# Extract the intersection of the BC districts and the boundary of GVA schools
vancouver_districts <- st_intersection(bc_districts, bbox_schools)

# Visualize
ggplot() + 
  geom_sf(data = vancouver_districts, fill = NA, color = "darkgray") + 
  geom_sf(data = greatervan_schools, color = "red", size = 1) + 
  ggtitle("Schools of Greater Vancouver")
```

## Analyzing School Distribution

Now that we have our data prepared, let's start our analysis by looking
at the distribution of schools across districts.

```{r}
# Count schools per district
schools_per_district <- greatervan_schools %>% 
  # left join by default
  # join method - intersection by default (which district does a school intersect with?)
  st_join(
    vancouver_districts %>% 
      # geometry column is always inherited
      select(FEDENAME)
  )

# sanity check
schools_per_district %>% 
  head() %>%
  select(NAME, ADDRESS, FEDENAME)

schools_per_district <- schools_per_district %>%
  group_by(FEDENAME) %>%
  summarise(school_count = n())

(schools_per_district <- schools_per_district %>% 
  as_tibble() %>% 
  select(-geometry))

vancouver_districts <- vancouver_districts %>% 
  left_join(schools_per_district, by = "FEDENAME")

ggplot() +
  geom_sf(data = vancouver_districts, aes(fill = school_count), color = "darkgray") + 
  geom_sf(data = greatervan_schools, color = "red", size = 1) + 
  scale_fill_viridis_c(option = "plasma") +
  ggtitle("Number of Schools per District in BC")
```

Here, we're using `st_join()` to perform a spatial join between
districts and schools. This assigns each school to a district based on
its location. Then, we use `group_by()` and `summarise()` to count the
number of schools in each district. The resulting map gives us a quick
visual understanding of where schools are concentrated.

Let's get our bearings with a few city names

```{r}
# Create a data frame for the major cities in the GVA
major_cities <- data.frame(
    city = c("Vancouver", "Surrey", "Burnaby", "Richmond", "Coquitlam"),
    lat = c(49.2827, 49.1875, 49.2785, 49.1669, 49.2831),
    lon = c(-123.1207, -122.8509, -122.9423, -123.1337, -122.7931)
  )  %>% 
  st_as_sf(
    coords = c("lon", "lat"),
    crs = 4326
  ) %>% 
  st_transform(crs_selection)

# label the cities
ggplot() +
  geom_sf(data = vancouver_districts, aes(fill = school_count), color = "darkgray") + 
  geom_sf(data = major_cities, size = 3) + 
  scale_fill_viridis_c(option = "plasma") +
  ggtitle("Number of Schools per District in Vancouver Area") + 
  geom_sf_label(data = major_cities,
                aes(label = city), nudge_x = 5000, nudge_y = 2500)

```

## Analyzing School Accessibility

An important aspect of educational equity is school accessibility. Let's
analyze how much of BC's population is within a reasonable distance of a
school. We'll create 5km buffers around schools to represent areas
within easy reach.

```{r}
# Create 5km buffers around schools
school_buffers <- st_buffer(greatervan_schools, dist = 5000)

ggplot() + 
  geom_sf(data = vancouver_districts, fill = NA, color = "darkgray") + 
  geom_sf(data = school_buffers, color = "#ff000020", fill = NA) + 
  geom_sf(data = greatervan_schools, color = "red", size = 1) +
  ggtitle("Schools of Greater Vancouver")

# Union all buffers
accessibility_area <- st_union(school_buffers)

ggplot() + 
  geom_sf(data = vancouver_districts, fill = NA, color = "darkgray") + 
  geom_sf(data = accessibility_area, fill = "blue", alpha = 0.3) + 
  geom_sf(data = greatervan_schools, color = "red", size = 1) + 
  ggtitle("Accessibility to Schools in Greater Vancouver")

# Calculate area covered by school buffers
(accessibility_percentage <- st_area(accessibility_area))
(van_area <- st_area(vancouver_districts))
(van_area <- sum(van_area))
(accessibility_percentage <- accessibility_percentage / van_area * 100)
sprintf("%s%% of GVA is within 5km of a school", 
        round(accessibility_percentage, 2))
```

In this analysis, we use `st_buffer()` to create 5km zones around each
school. We then use `st_union()` to combine these into a single area,
and `st_intersection()` to find where this area overlaps with BC. This
gives us an idea of how much of BC's land area is within 5km of a
school.

## Analyzing School Catchment Areas

To understand how students might be distributed among schools, we can
create theoretical catchment areas using Voronoi polygons.

```{r}
# Create Voronoi polygons
school_voronoi <- greatervan_schools %>% 
  st_combine() %>% 
  st_voronoi()

ggplot() + 
  geom_sf(data = vancouver_districts, fill = NA, color = "darkgray") + 
  geom_sf(data = school_voronoi, color = "darkgray", fill = NA) + 
  geom_sf(data = greatervan_schools, color = "red", size = 1) +
  ggtitle("Theoretical School Catchment Areas in BC")

# Clip Voronoi polygons to BC boundary
school_catchments <- school_voronoi %>% 
  st_collection_extract() %>% # or use st_cast()
  st_intersection(bbox_schools)

ggplot() +
  geom_sf(data = school_catchments, color = "darkgray", fill = NA) + 
  geom_sf(data = greatervan_schools, color = "red", size = 1) +
  ggtitle("Theoretical School Catchment Areas in GVA")
```

Here, we use `st_voronoi()` to create Voronoi polygons around our
schools. These polygons represent areas that are closer to one school
than to any other. We then use `st_intersection()` to clip these
polygons to the GVA boundary.

## Finding Nearest Schools

Finally, let's look at the distribution of schools by finding the five
nearest schools for each school. This can help identify areas where
schools are clustered or isolated.

```{r}
# Calculate distances between all schools
school_distances <- st_distance(greatervan_schools)

# Find indices of 5 nearest schools for each school (ignoring itself)
nearest_5 <- apply(school_distances, 1, 
                   function(x) greatervan_schools$NAME[order(x)[2:6]]) %>% 
  t()

# Create a data frame with school names and their 5 nearest schools
colnames(nearest_5) <- paste("nearest", 1:5, sep = "_")
nearest_5 <- nearest_5 %>% 
  as_tibble() %>% 
  mutate(
    school = greatervan_schools$NAME,
    .before = 1
  )

# Display the first few rows
head(nearest_5)
```

In this final analysis, we use `st_distance()` to calculate the
distances between all schools. We then use this to find the five nearest
neighbors for each school. This information could be useful for planning
shared resources or understanding the density of schools in different
areas.

### BONUS: Interative Maps

SF integrates well with other R packages and ecosystems:

-   Tidyverse: As we've seen, SF works seamlessly with dplyr and
    ggplot2.
-   Leaflet: For interactive web maps:

```{r}
#| message: false
library(leaflet)

school_icon <- makeIcon(
    "https://upload.wikimedia.org/wikipedia/commons/e/ed/UPSJ_select_schools_icon.png",
    "https://upload.wikimedia.org/wikipedia/commons/e/ed/UPSJ_select_schools_icon.png",
    18,
    18
  )

leaflet() %>%
  addTiles() %>%
  addPolygons(data = 
                vancouver_districts %>% 
                st_transform(crs = 4326), fill = NA) %>%
  addMarkers(data = 
                greatervan_schools %>% 
                st_transform(crs = 4326),
              label = ~NAME,
  clusterOptions = markerClusterOptions(),icon = ~school_icon)
```

## Conclusion

Throughout this workshop, we've explored various aspects of British
Columbia's educational landscape using spatial analysis techniques in R.
We've seen how to load and manipulate spatial data, create informative
visualizations, and perform analyses that can inform real-world
decision-making in education and urban planning.

Key SF functions we've used include: 
- `st_read()` for reading spatial
data 
- `st_transform()` for ensuring consistent coordinate reference
systems 
- `st_join()` for spatial joins 
- `st_buffer()` for creating buffer zones 
- `st_union()` for combining geometries 
- `st_intersection()` for finding overlaps between geometries 
- `st_area()` for calculating areas 
- `st_voronoi()` for creating Voronoi polygons 
- `st_distance()` for calculating distances between geometries

Remember, this is just the beginning of what's possible with spatial
analysis in R. As you continue to explore and analyze spatial data,
you'll discover even more powerful techniques and insights that can help
inform policy, improve resource allocation, and enhance educational
equity across British Columbia and beyond.
